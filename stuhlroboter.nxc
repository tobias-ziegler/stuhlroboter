/*
* Credits: DataSol 8
* 	Paul Winkler
* 	Manuel Wischnat
* 	Oskar Wortmann
* 	Tobias Ziegler
*/

//Konstantendefinition
#define POWER 30
#define LINIENVERFOLGUNG_LINKSDREHUNG_ZEIT 120
#define LINIENVERFOLGUNG_RECHTSDREHUNG_ZEIT 240
#define MINIMALE_DISTANZ_ZU_OBJEKT 50

//Funktionsprototypen
void sensorenInitialisieren();
void startVorgang();
void sortierVorgang(int linienFarbton, int zeitFuer90GradDrehung);
int stuhlFarbeHerausfinden();
void zuFarbeFahren(int linienFarbton, int stuhlFarbe, int zeitFuer90GradDrehung);
void zuStartpunktFahren(int linienFarbton, int stuhlFarbe, int zeitFuer90GradDrehung);
void linienVerfolgung(int linienFarbton);
void linksDrehung(int zeitspanne);
void rechtsDrehung(int zeitspanne);
void geradeAusFahren(int zeitspanne);
void arbeitUnterbrechenFallsWegBlockiert();
void fehlerMeldungAnzeigen(string nachricht);
int kalibrierungSW();
long kalibrierung90();

task main() {

	//Variablendefinition
	int linienFarbton;
	int zeitFuer90GradDrehung;

	sensorenInitialisieren();

	//Zuweisung des Ergebnisses der Schwarz-Weiss Kalibrierung
	linienFarbton = kalibrierungSW();

	//Zuweisung des Ergebnisses der 90° Kalibrierung
	zeitFuer90GradDrehung = kalibrierung90();

	startVorgang();

	sortierVorgang(linienFarbton, zeitFuer90GradDrehung);
}

void sensorenInitialisieren() {
	//Farbsensor initialisieren
	SetSensorColorFull(IN_1);

	//Ultraschallsensor initialisieren
	SetSensorLowspeed(IN_2);

	//Lichtsensor initialisieren
	SetSensorLight(IN_3);

	//Berührungssensor initialisieren
	SetSensorTouch(IN_4);
}

void startVorgang() {
	//Bildschirm löschen
	ClearScreen();

	//Bedienungsanleitung ausgeben
	TextOut(5, LCD_LINE1, "Drücken Sie den Knopf, um den Sortiervorgang zu starten.");

	//Durchschleifen solange der Knopf nicht gedrückt wurde
	//Berührungssensor einlesen
	while(Sensor(IN_4) != 1) { }

	//Bildschirm löschen
	ClearScreen();

	//Ton ausgeben
	PlaySound(SOUND_DOUBLE_BEEP);
	
	//2 Sekunden warten
	Wait(SEC_2);
}

void sortierVorgang(int linienFarbton, int zeitFuer90GradDrehung) {
    
	//Stuhlzähler initialisieren
	int stuhlZaehler = 0;

	//Stuhlzähler anzeigen
	TextOut(5, LCD_LINE1, "Anzahl einsortierter Stühle:");
	NumOut(5, LCD_LINE2, stuhlZaehler);

	while(true) {
		//Stuhlfarbe einlesen
		int stuhlFarbe = stuhlFarbeHerausfinden();

		zuFarbeFahren(linienFarbton, stuhlFarbe, zeitFuer90GradDrehung);

		//Stuhl einsortiert, Zähler erhöhen
		stuhlZaehler++;

		//180° Drehung
		rechtsDrehung(zeitFuer90GradDrehung * 2);

		zuStartpunktFahren(linienFarbton, stuhlFarbe, zeitFuer90GradDrehung);

		//180° Drehung
		rechtsDrehung(zeitFuer90GradDrehung * 2);
	}
}

int stuhlFarbeHerausfinden() {
	
	//Variablendefinition
	int stuhlFarbe;

	while(true) {
		//Stuhlfarbe einlesen
		stuhlFarbe = Sensor(IN_1);

		if (
			stuhlFarbe == INPUT_BLACKCOLOR ||
			stuhlFarbe == INPUT_REDCOLOR ||
			stuhlFarbe == INPUT_YELLOWCOLOR
		) {
			//Gültige Stuhlfarbe
			break;
		}

		//Ungültige Stuhlfarbe
		fehlerMeldungAnzeigen("Farbe nicht erkannt, bitte halten Sie den Stuhl erneut unter den Sensor.");
	}

	return stuhlFarbe;
}

void zuFarbeFahren(int linienFarbton, int stuhlFarbe, int zeitFuer90GradDrehung) {
	switch(stuhlFarbe) {
		case INPUT_BLACKCOLOR:
			linienVerfolgung(linienFarbton);

			//Vorfahren zur Mitte
			geradeAusFahren(SEC_1 + MS_200);

			rechtsDrehung(zeitFuer90GradDrehung);
   			linienVerfolgung(linienFarbton);
			
			//Über die Ecke hinausfahren
			geradeAusFahren(MS_400);

			linksDrehung(zeitFuer90GradDrehung);
			linienVerfolgung(linienFarbton);
			
			break;
		case INPUT_REDCOLOR:
			linienVerfolgung(linienFarbton);
			
			//Vorfahren zur Mitte
			geradeAusFahren(SEC_1 + MS_200);
			
			linksDrehung(zeitFuer90GradDrehung);
			linienVerfolgung(linienFarbton);
			
			//Über die Ecke hinausfahren
			geradeAusFahren(MS_400);

			rechtsDrehung(zeitFuer90GradDrehung);
			linienVerfolgung(linienFarbton);
			
			break;
		case INPUT_YELLOWCOLOR:
			linienVerfolgung(linienFarbton);

			//Vorfahren zur Mitte
			geradeAusFahren(SEC_1 + MS_200);

			linienVerfolgung(linienFarbton);
			
			break;
	}
}

void zuStartpunktFahren(int linienFarbton, int stuhlFarbe, int zeitFuer90GradDrehung) {
	switch(stuhlFarbe) {
		case INPUT_BLACKCOLOR:
			linienVerfolgung(linienFarbton);

			//Über die Ecke hinausfahren
			geradeAusFahren(MS_400);

			rechtsDrehung(zeitFuer90GradDrehung);
			linienVerfolgung(linienFarbton);
			
			//Vorfahren zur Mitte
			geradeAusFahren(SEC_1 + MS_200);
			
			linksDrehung(zeitFuer90GradDrehung);
			linienVerfolgung(linienFarbton);
			
			break;
		case INPUT_REDCOLOR:
			linienVerfolgung(linienFarbton);

			//Über die Ecke hinausfahren
			geradeAusFahren(MS_400);

			linksDrehung(zeitFuer90GradDrehung);
			linienVerfolgung(linienFarbton);
			
			//Vorfahren zur Mitte
			geradeAusFahren(SEC_1 + MS_200);

			rechtsDrehung(zeitFuer90GradDrehung);
			linienVerfolgung(linienFarbton);
			
			break;
		case INPUT_YELLOWCOLOR:
			linienVerfolgung(linienFarbton);
			
			//Vorfahren zur Mitte
			geradeAusFahren(SEC_1 + MS_200);

			linienVerfolgung(linienFarbton);
			
			break;
	}
}

void linienVerfolgung(int linienFarbton) {
	while(true) {

		//Farbsensor einlesen
		if(Sensor(IN_3) <= linienFarbton) {
			arbeitUnterbrechenFallsWegBlockiert();

			//Roboter befindet sich auf der Linie, geradeaus fahren
			OnFwd(OUT_AB, POWER);
			continue;
		}

		//Roboter befindet sich nicht auf der Linie

		linksDrehung(LINIENVERFOLGUNG_LINKSDREHUNG_ZEIT);
		//Überprüfung, ob sich die Linie links befindet
		if(Sensor(IN_3) <= linienFarbton) {
			continue;
		}

		rechtsDrehung(LINIENVERFOLGUNG_RECHTSDREHUNG_ZEIT);
		//Überprüfung, ob sich die Linie rechts befindet
		if(Sensor(IN_3) <= linienFarbton) {
			continue;
		}

		//Auf Ausgangsposition zurückdrehen, Linienverfolgung abgeschlossen
		linksDrehung(LINIENVERFOLGUNG_LINKSDREHUNG_ZEIT);
		
		break;
	}
}

void linksDrehung(int zeitspanne) {
	arbeitUnterbrechenFallsWegBlockiert();
	
	//Linksdrehung
	OnFwd(OUT_B,POWER);
	OnRev(OUT_A,POWER);
	Wait(zeitspanne);
	Off(OUT_AB);
}

void rechtsDrehung(int zeitspanne) {
	arbeitUnterbrechenFallsWegBlockiert();
	
	//Rechtsdrehung
	OnFwd(OUT_A,POWER);
	OnRev(OUT_B,POWER);
	Wait(zeitspanne);
	Off(OUT_AB);
}

void geradeAusFahren(int zeitspanne) {
	arbeitUnterbrechenFallsWegBlockiert();
	
	//Geradeaus fahren
	OnFwd(OUT_AB, POWER);
	Wait(zeitspanne);
	Off(OUT_AB);
}

void arbeitUnterbrechenFallsWegBlockiert() {
	//Durchschleifen solange sich ein Objekt im Weg befindet
	//Ultraschallsensor einlesen
	while (SensorUS(IN_2) < MINIMALE_DISTANZ_ZU_OBJEKT) {
		fehlerMeldungAnzeigen("Der Weg ist blockiert. Räumen Sie den Weg frei.");
	}
}

void fehlerMeldungAnzeigen(string nachricht) {
	//LCD_LINE3 & LCD_LINE4 werden für die Fehlerausgabe benutzt

	//Zeilen 3 & 4 löschen
	ClearLine(LCD_LINE3);
	ClearLine(LCD_LINE4);

	//Fehlernachricht ausgeben
	TextOut(5, LCD_LINE3, "FEHLER:");
	TextOut(5, LCD_LINE4, nachricht);

	//5 Sekunden warten
	Wait(SEC_5);

	//Zeilen 3 & 4 löschen
	ClearLine(LCD_LINE3);
	ClearLine(LCD_LINE4);
}

int kalibrierungSW(void)
	//Funktion zur Ermittlung des Schwarzwertes
	//der Linienkante durch Berechnung des Durch-
	//schnittes aus Minimal-(schwarz) und Maximalwert(weiß)
	//Funktion hat eigene "POWER" (=50)
	//die auf "Dreh-Zeit" (600/1200) abgestimmt ist.
{
	long end_time;
	long t0 = CurrentTick();
	int iDurchschnitt;
	int imin = 999;
	int imax = -1;
	int iHelligkeitKal=0;
	ClearScreen();
	//Kalibrierung nach links
	TextOut(5, LCD_LINE1, "KALIBRIERUNG LINKS");
  	//Motor nach links starten
	OnFwd(OUT_B, 50);
	OnRev(OUT_A, 50);
	while (CurrentTick()-t0 < 990) {
		iHelligkeitKal = Sensor(IN_3);
		if (iHelligkeitKal > imax) {
			imax = iHelligkeitKal;
		} else if (iHelligkeitKal < imin) {
			imin = iHelligkeitKal;
		}
	}
	// Kalibrierung nach rechts
	TextOut(5, LCD_LINE2, "KALIBRIERUNG RECHTS");
	end_time = CurrentTick() + 1200;
	OnFwd(OUT_A, 50);
	OnRev(OUT_B, 50);
	while (CurrentTick() < end_time) {
		iHelligkeitKal = Sensor(IN_3);
		if (iHelligkeitKal > imax) {
			imax = iHelligkeitKal;
		} else if (iHelligkeitKal < imin) {
			imin = iHelligkeitKal;
		}
	}

	//Durchschnitt ausrechnen und anzeigen
	iDurchschnitt = (imin+imax)/2;
	ClearLine(LCD_LINE3);
	TextOut(4, LCD_LINE3, "SW Linienkante:");
	NumOut(65, LCD_LINE3, iDurchschnitt);

	//Kalibrierung abgeschlossen, Linienkante finden
	TextOut(4, LCD_LINE3, "KALIBRIERUNG ABGESCHLOSSEN");
	while (Sensor(IN_3) > iDurchschnitt) {
		OnFwd(OUT_B, 50);
		OnRev(OUT_A, 50);
	}
	Off(OUT_AB);
	return iDurchschnitt;
}

long kalibrierung90()
	//Funktion zur Ermittlung der Zeit,
	//die für eine 90Grad-Drehung benötigt wird
{
	ClearScreen();
	TextOut(5, LCD_LINE1, "KALIBR. LÄUFT");
	int iHelligkeitkal=0;
	long t0kal=CurrentTick(), turntime180=0;

	//drehen bis Linie wieder gefunden ist
  	OnFwd(OUT_A,POWER);
	OnRev(OUT_B,POWER);
	Wait(300);
  	do{
		iHelligkeitkal=Sensor(IN_3);
	}while(iHelligkeitkal>=50)

	TextOut(5, LCD_LINE2, "LINIE GEFUNDEN");


	//Benötigte Zeit für die 180Grad Drehung berechnen
	turntime180=CurrentTick()-t0kal;

	//zurückdrehen auf die Linie
  	OnFwd(OUT_B,POWER);
	OnRev(OUT_A,POWER);
	Wait(300);
  	do{
		iHelligkeitkal=Sensor(IN_3);
	}while(iHelligkeitkal>=50)
	TextOut(5, LCD_LINE3, "KALIBR. ABGESCHLOSSEN");
	return turntime180/2;
}
